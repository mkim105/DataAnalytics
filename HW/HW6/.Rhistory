setwd('C:/users/mg/Desktop/Data Analytics/HW/HW6')
getwd()
mydata = read.table("HW6_mileage.txt", header=T)
makemodel = mydata$MAKEMODEL
mpg = mydata$MPG
hp = mydata$HP
wt = mydata$WT
fit = lm(mpg~hp+wt)
summary(fit)
plot(mydata)
# a) residual analysis.
#     Plot residuals vs Predicted values:
plot( fitted(fit), rstandard(fit), main="Predicted vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Plot residuals vs each x-variable:
plot(hp, rstandard(fit), main="horse power vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(wt, rstandard(fit), main="weight vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(fit))
qqline(rstandard(fit), col=2)
#     Normality Test(Shapiro-Wilk Normality Test)
shapiro.test(rstandard(fit)) #If p-value>0.05, we say it follows normal distribution at 95% confidence level
# b) Apply a transformation to the Y variable.
logmpg = log(mpg)
fit2 = lm(logmpg~hp+wt)
plot(hp, logmpg)
plot(wt, logmpg)
summary(fit2)
sqrtmpg = sqrt(mpg)
fit3 = lm(sqrtmpg~hp+wt)
plot(hp, sqrtmpg)
plot(wt, sqrtmpg)
summary(fit3)
invmpg = 1/mpg
fit4 = lm(invmpg~hp+wt)
plot(hp, invmpg)
plot(wt, invmpg)
summary(fit4)
cor(cbind(mpg,logmpg,sqrtmpg,invmpg,hp,wt))
# c) residual analysis on logmpg.
#     Plot residuals vs Predicted values:
plot( fitted(fit2), rstandard(fit2), main="Predicted vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Plot residuals vs each x-variable:
plot(hp, rstandard(fit2), main="horse power vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(wt, rstandard(fit2), main="weight vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(fit2))
qqline(rstandard(fit2), col=2)
#     Normality Test(Shapiro-Wilk Normality Test)
shapiro.test(rstandard(fit2)) #If p-value>0.05, we say it follows normal distribution at 95% confidence level
# d) Interpret te estimated values of the regression parameters
summary(fit2)
# e) Use the step() function.
base = lm(logmpg~hp, data=mydata)
full = lm(logmpg~hp+wt, data=mydata)
fit5 = step(base, scope=list(upper=full, lower=~1), direction="both", trace=T)
summary(fit5)
setwd('C:/users/mg/Desktop/Data Analytics/HW/PROJECT/콘크리트분석')
getwd()
mydata = read.table("compresive_strength_concrete.csv", header=T, sep=',')
head(mydata)
plot(mydata)
sp = mydata$Superplasticizer..component.5..kg.in.a.m.3.mixture.
cc = mydata$Concrete.compressive.strength.MPa..megapascals..
plot(sp, cc)
plot(sp1, cc)
sp1 = sp*sp
sp2 = sqrt(sp)
sp3 = 1/sp
plot(sp1, cc)
plot(sp2, cc)
plot(sp3, cc)
plot(cc, sp1)
plot(cc, sp2)
plot(cc, sp3)
cc1 = cc*CC
cc2 = sqrt(cc)
cc3 = 1/cc
plot(cc2, sp)
plot(cc1, sp)
cc1 = cc*CC
cc2 = sqrt(cc)
cc3 = 1/cc
plot(cc1, sp)
cc1 = cc*CC
cc = mydata$Concrete.compressive.strength.MPa..megapascals..
cc1 = cc*CC
cc = mydata$Concrete.compressive.strength.MPa..megapascals..
cc1 = cc*CC
cc1 = cc*cc
cc2 = sqrt(cc)
cc3 = 1/cc
plot(cc1, sp)
plot(cc2, sp)
plot(cc3, sp)
age = mydata$Age..day.
plot(age, cc)
age1 = age*age
plot(age1, cc)
age2 = sqrt(age)
plot(age2, cc)
age3 = 1/age
plot(age3, cc)
plot(cc, age3)
setwd('C:/users/mg/Desktop/Data Analytics/HW/PROJECT/콘크리트분석')
getwd()
mydata = read.table("compresive_strength_concrete.csv", header=T, sep=',')
cmt = mydata$Cement..component.1..kg.in.a.m.3.mixture.
bf = mydata$Blast.Furnace.Slag..component.2..kg.in.a.m.3.mixture.
fa = mydata$Fly.Ash..component.3..kg.in.a.m.3.mixture.
wt = mydata$Water...component.4..kg.in.a.m.3.mixture.
sp = mydata$Superplasticizer..component.5..kg.in.a.m.3.mixture.
cA = mydata$Coarse.Aggregate...component.6..kg.in.a.m.3.mixture.
fA = mydata$Fine.Aggregate..component.7..kg.in.a.m.3.mixture.
age = mydata$Age..day.
cc = mydata$Concrete.compressive.strength.MPa..megapascals..
fit = lm(cc~cmt+bf+fa+wt+sp+cA+fA+age)
summary(fit)
cor(mydata)
cor(cc, fA)
fit = lm(cc~cmt+bf+fa+wt+sp+cA+fA+age)
summary(fit)
fit2 = lm(cc~cmt+bf+fa+wt+sp+age)
summary(fit2)
plot(fit2)
mydata = read.table("HW6_energytemp.txt", header=T)
energy = mydata$energy
tempd = mydata$temp
tempd2 = tempd^2;
tempd3 = tempd^3;
# a) Create a scatterplot.
plot(tempd, energy)
cor(tempd, energy)
# b) Fit the cubic model
#   a) Test the goodness of fit test(F-test).
#   b) Are all variables in the model significant?
fit = lm(energy ~ tempd+tempd2+tempd3, data=mydata)
summary(fit)
#   c) residual analysis.
#     Plot residuals vs Predicted values:
plot( fitted(fit), rstandard(fit), main="Predicted vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Plot residuals vs each x-variable:
plot(tempd, rstandard(fit), main="tempd vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(tempd2, rstandard(fit), main="tempd2 vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(tempd3, rstandard(fit), main="tempd3 vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(fit))
qqline(rstandard(fit), col=2)
#     Normality Test(Shapiro-Wilk Normality Test)
shapiro.test(rstandard(fit)) #If p-value>0.05, we say it follows normal distribution at 95% confidence level
#   e) Use the fitted regression model to predict the average energy consumption for an average differnece
#      in temperature equal to TEMPD = 10
#      and use the predict() function in R to produce predictions and confidence interval
# Prediction for one certain data point.
# Create new data frame containing xvalues for prediction.
new = data.frame (tempd=c(10), tempd2=c(100), tempd3=c(1000))
# Use predict() to compute predicted value and standard error
# predict(model_name, new_dataframe, ...)
# se.fit=T to compute predicted value
predict(fit, new, se.fit = T)
# compute predicted value and prediction interval
predict(fit, new, interval="prediction", level=0.95)
#   f) By using influence.measures() function to identify whether there are influential points that
#      can affect your final model. Use cook’s distance as the metric to identify the influential points
influence.measures(fit)
summary(influence.measures(fit)) # Print out only influential observations
cooks.distance(fit)
sort(cooks.distance(fit), TRUE)[1]
sort(cooks.distance(fit), TRUE)[2]
sort(cooks.distance(fit), TRUE)[3]
# a) Create a scatterplot.
plot(tempd, energy)
setwd('C:/users/mg/Desktop/Data Analytics/HW/HW6')
getwd()
mydata = read.table("HW6_energytemp.txt", header=T)
energy = mydata$energy
tempd = mydata$temp
tempd2 = tempd^2;
tempd3 = tempd^3;
# a) Create a scatterplot.
plot(tempd, energy)
cor(tempd, energy)
cor(cbind(cc,cmt,bf,fa,wt,sp,cA,fA,age))
cc1 = cc*cc
cc2 = sqrt(cc)
cc3 = 1/cc
cc4 = cc1*cc
cor(cbind(cc1,cmt,bf,fa,wt,sp,cA,fA,age))
cor(cbind(cc2,cmt,bf,fa,wt,sp,cA,fA,age))
cor(cbind(cc3,cmt,bf,fa,wt,sp,cA,fA,age))
cor(cbind(cc4,cmt,bf,fa,wt,sp,cA,fA,age))
