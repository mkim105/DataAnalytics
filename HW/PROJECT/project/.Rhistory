t3 = log(yr)
t4 = 1/yr
t5 = sqrt(yr)
tcol = cbind(y,t1,t2,t3,t4,t5)
cor(tcol) # <- No significant improvement, so ignore yr.
#comparison itdth tranasformation
t1 = itdth
t2 = itdth*itdth
t3 = log(itdth)
t4 = 1/itdth
t5 = sqrt(itdth)
tcol = cbind(y,t1,t2,t3,t4,t5)
cor(tcol) # <- No significant improvement, so ignore itdth
#comparison hb tranasformation
t1 = hb
t2 = hb*hb
t3 = log(hb)
t4 = 1/hb
t5 = sqrt(hb)
tcol = cbind(y,t1,t2,t3,t4,t5)
cor(tcol) # <- significant improvement in t2
#comparison msls tranasformation
t1 = msls
t2 = msls*msls
t3 = log(msls)
t5 = sqrt(msls)
t4 = 1/msls
tcol = cbind(y,t1,t2,t3,t4,t5)
cor(tcol) # <- No significant improvement, so ignore msls.
#comparison ufdth tranasformation
t1 = ufdth
t2 = ufdth*ufdth
t3 = log(ufdth)
t4 = 1/ufdth
t5 = sqrt(ufdth)
tcol = cbind(y,t1,t2,t3,t4,t5)
cor(tcol) # <- significant improvement in t3
#comparison totalex tranasformation
t1 = totalex
t2 = totalex*totalex
t3 = log(totalex)
t4 = 1/totalex
t5 = sqrt(totalex)
tcol = cbind(y,t1,t2,t3,t4,t5)
cor(tcol) # <- No significant improvement, so ignore totalex
###Conclusion: (ignore yr,msls,totalex), (transform sqrt(itdth), hb2, log(ufdth))
newdata = newdata[c(-6,-10,-14,-18)] #(ignore yr,itdth,msls,totalex)
#add transformed new variables
hb2 = hb*hb
newdata[,"hb2"]=hb2
logufdth = log(ufdth)
newdata[,"logufdth"]=logufdth
################# Linear regression model #############
#첫 모델에 대한 VIF를 진행해서 x variable간 multicollinearity problem을 해결한다.
library(car)
#build basic model(Just only one x variables)
basicfull = glm(lfey~cAf + cAm+ cAs+cOc+
sts+
achl+perex+bmi+gdp+th119+th59+iccr+sch+hiv+
atmy+logufdth+hb2+plio+dpria)
# Evaluate MultiCollnearity
vif(basicfull) #iccr>th59>th119>sch>gdp>perex>cAf>
basicfull = glm(lfey~ cAm+ cAs+cOc+ #iccr,th59,perex,cAf,cEu are removed.
sts+
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria)
vif(basicfull)
#build full model CASE1
full_1 = glm(lfey~ cAm+ cAs+cOc+ #iccr,th59,perex,cAf,cEu are removed.
sts+
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria)
#build base model CASE1
base_1 = glm(lfey~achl,data=newdata)
# model 1  Both direction by stepwise()
m1_1 = step(base_1, scope=list(upper=full_1, lower=~1), direction="both", trace=T)
summary(m1_1)  # aic 15990
# m2 Forward Selection by step()
m1_2 = step(base_1, scope=list(upper=full_1, lower=~1), direction="forward", trace=T)
summary(m1_2) # AIC: 16000
# m3 Backward Elimination by step() based on AIC
m1_3 = step(full_1, direction = "backward", trace=TRUE)
summary(m1_3) # AIC: 15990
#install.packages("leaps")
library(leaps)
regsubsets.out <-
regsubsets(lfey~cAm+cAs+cOc+
sts+
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria,
data = newdata,
nbest = 1,       # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary.out <- summary(regsubsets.out)
as.data.frame(summary.out$outmat)
res.legend <-
subsets(regsubsets.out, statistic="adjr2", legend = FALSE, min.size = 5, main = "Adjusted R^2")
res.legend
summary.out$which[13,]
which.max(summary.out$adjr2)  #13
summary(m1_4) # AIC - 16000
m1_4 = glm(formula = lfey~cAm+cAs+cOc+
sts+
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria,data=newdata)
#plot비교 Polynomial인지 아닌지 확인하기위해.
attach(mtcars)
par(mfrow=c(4,3))
summary(m1_1)  # aic 15990
summary(m1_2) # AIC: 16000
# m3 Backward Elimination by step() based on AIC
m1_3 = step(full_1, direction = "backward", trace=TRUE)
summary(m1_3) # AIC: 15990
summary(m1_4) # AIC - 16000
#plot비교 Polynomial인지 아닌지 확인하기위해.
attach(mtcars)
par(mfrow=c(4,3))
plot(achl,y)
plot(perex,y)
plot(bmi,y)
plot(gdp,y)
plot(th119,y)
plot(th59,y)
plot(iccr,y)
plot(sch,y)
plot(hiv,y)
plot(atmy,y)
plot(logufdth,y)
plot(hb2,y)
###  polynominal  -  x-var에 th119^2, th119^3, logufdth^2, logufdth^3 추가 -
th1192 = th119^2
th1193 = th119^3
th592 = th59^2
th593 = th59^3
logufdth2 = logufdth^2
logufdth3 = logufdth^3
full_2 = glm(lfey~cAm+cAs+cOc+
sts+
achl+bmi+gdp+th119+th1192+th1193+
sch+hiv+atmy+logufdth+logufdth2+logufdth3+hb2+plio+dpria,
data=newdata)
vif(full_2)
full_2 = glm(lfey~cAm+cAs+cOc+
sts+
achl+bmi+gdp+th1193+
sch+hiv+atmy+logufdth+hb2+plio+dpria,
data=newdata)
vif(full_2) #Multicollinearity 해결
#build base model CASE1
base_2 = glm(lfey~achl,data=newdata)
# model 1  Both direction by stepwise()
m2_1 = step(base_2, scope=list(upper=full_2, lower=~1), direction="both", trace=T)
summary(m2_1)  # aic 16010
# m2 Forward Selection by step()
m2_2 = step(base_2, scope=list(upper=full_2, lower=~1), direction="forward", trace=T)
summary(m2_2) # AIC: 16010
# m3 Backward Elimination by step() based on AIC
m2_3 = step(full_2, direction = "backward", trace=TRUE)
summary(m2_3) # AIC: 16010
# m2_4 by best subset
#install.packages("leaps")
library(leaps)
regsubsets.out <-
regsubsets(lfey~cAm+cAs+cOc+
sts+
achl+bmi+gdp+th1193+
sch+hiv+atmy+logufdth+hb2+plio+dpria,
data = newdata,
nbest = 1,       # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary.out <- summary(regsubsets.out)
as.data.frame(summary.out$outmat)
res.legend <-
subsets(regsubsets.out, statistic="adjr2", legend = FALSE, min.size = 5, main = "Adjusted R^2")
res.legend
which.max(summary.out$adjr2)  #12
summary.out$which[12,]
m2_4 = glm(formula = lfey~cAm+cAs+cOc+
sts+
bmi+gdp+sch+hiv+
atmy+logufdth+plio+dpria,data=newdata)
summary(m2_4) # AIC - 16010
summary(m2_1)  # aic 16010
# m2 Forward Selection by step()
m2_2 = step(base_2, scope=list(upper=full_2, lower=~1), direction="forward", trace=T)
summary(m2_2) # AIC: 16010
# m3 Backward Elimination by step() based on AIC
m2_3 = step(full_2, direction = "backward", trace=TRUE)
summary(m2_3) # AIC: 16010
# m2_4 by best subset
#install.packages("leaps")
library(leaps)
regsubsets.out <-
regsubsets(lfey~cAm+cAs+cOc+
sts+
achl+bmi+gdp+th1193+
sch+hiv+atmy+logufdth+hb2+plio+dpria,
data = newdata,
nbest = 1,       # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary.out <- summary(regsubsets.out)
as.data.frame(summary.out$outmat)
res.legend <-
subsets(regsubsets.out, statistic="adjr2", legend = FALSE, min.size = 5, main = "Adjusted R^2")
which.max(summary.out$adjr2)  #12
res.legend
summary.out$which[12,]
m2_4 = glm(formula = lfey~cAm+cAs+cOc+
sts+
bmi+gdp+sch+hiv+
atmy+logufdth+plio+dpria,data=newdata)
summary(m2_4) # AIC - 16010
########INTERACTION TERM이 무엇인가를 알기위해########
#install.packages('sjPlot')
#install.packages('sjmisc')
#install.packages('ggplot2')
#install.packages('snakecase')
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(snakecase)
theme_set(theme_sjplot())
tf1 <- glm(y ~ achl * sts, data = newdata)
plot_model(tf1, type = "int", terms = c("achl", "sts"))
tf1 <- glm(y ~ perex * sts, data = newdata)
plot_model(tf1, type = "int", terms = c("hiv", "sts")) #Not Interaction term
tf1 <- glm(y ~ atmy * sts, data = newdata)
full_3 = glm(lfey~ cAm+ cAs+cOc+
sts+
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria+
(achl*sts)+(bmi*sts)+(gdp*sts)+(th119*sts)+(sch*sts)+(atmy*sts)+(hb2*sts)+(logufdth*sts)+(plio*sts)+(dpria*sts)+
(achl*cAm)+(bmi*cAm)+(gdp*cAm)+(th119*cAm)+(sch*cAm)+(hiv*cAm)+(atmy*cAm)+(hb2*cAm)+(logufdth*cAm)+(plio*cAm)+(dpria*cAm)+
(achl*cAs)+(bmi*cAs)+(gdp*cAs)+(th119*cAs)+(sch*cAs)+(hiv*cAs)+(atmy*cAs)+(logufdth*cAs)+(plio*cAs)+(dpria*cAs)+
(achl*cOc)+(bmi*cOc)+(gdp*cOc)+(th119*cOc)+(sch*cOc)+(hiv*cOc)+(atmy*cOc)+(hb2*cOc)+(logufdth*cOc)+(plio*cOc)+(dpria*cOc))
full_3 = glm(lfey~
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria+
(gdp*cAm)+(hiv*cAm)+
(achl*cAs)+(gdp*cAs)+(hiv*cAs)+
(gdp*cOc)+(th119*cOc)+(hiv*cOc))
vif(full_3)
max(vif(full_3)) # all the multicollinearity variables are removed.
#build base model CASE1
base_3 = glm(lfey~achl,data=newdata)
# model 1  Both direction by stepwise()
m3_1 = step(base_3, scope=list(upper=full_3, lower=~1), direction="both", trace=T)
summary(m3_1)  # aic 16124
# m2 Forward Selection by step()
m3_2 = step(base_3, scope=list(upper=full_3, lower=~1), direction="forward", trace=T)
summary(m3_2) # AIC: 16124
# m3 Backward Elimination by step() based on AIC
m3_3 = step(full_3, direction = "backward", trace=TRUE)
summary(m3_3) # AIC: 16124
# m3_4 by best subset
#install.packages("leaps")
library(leaps)
regsubsets.out <-
regsubsets(lfey~
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+hb2+plio+dpria+
(gdp*cAm)+(hiv*cAm)+
(achl*cAs)+(gdp*cAs)+(hiv*cAs)+
(gdp*cOc)+(th119*cOc)+(hiv*cOc),
data = newdata,
nbest = 1,       # 1 best model for each number of predictors
nvmax = NULL,    # NULL for no limit on number of variables
force.in = NULL, force.out = NULL,
method = "exhaustive")
summary.out <- summary(regsubsets.out)
as.data.frame(summary.out$outmat)
res.legend <-
subsets(regsubsets.out, statistic="adjr2", legend = FALSE, min.size = 5, main = "Adjusted R^2")
res.legend
which.max(summary.out$adjr2)  #12
summary.out$which[19,]
m3_4 = glm(lfey~
achl+bmi+gdp+th119+sch+hiv+
atmy+logufdth+plio+dpria+
(gdp*cAm)+(hiv*cAm)+
(achl*cAs)+(gdp*cAs)+
(gdp*cOc)+(th119*cOc),data=newdata)
summary(m3_4) # AIC - 16124
# F-test
summary(m1_1)
summary(m2_1)
summary(m3_1) #모든 모델이 통과함.
summary(m3_1)  # aic 16124
summary(m3_2) # AIC: 16124
# m3 Backward Elimination by step() based on AIC
m3_3 = step(full_3, direction = "backward", trace=TRUE)
summary(m3_3) # AIC: 16124
summary(m3_4) # AIC - 16124
# F-test
summary(m1_1)
summary(m2_1)
summary(m3_1) #모든 모델이 통과함.
####### Residual Analysis of m1_1 #######
attach(mtcars)
####### Residual Analysis of m1_1 #######
attach(mtcars)
par(mfrow=c(4,4))
#     Plot residuals vs Predicted values:
plot( fitted(m1_1), rstandard(m1_1), main="Predicted vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Plot residuals vs each x-variable:
plot(sch, rstandard(m1_1), main="sch vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(atmy, rstandard(m1_1), main="atmy vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(hiv, rstandard(m1_1), main="hiv vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(dpria, rstandard(m1_1), main="dpria vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(bmi, rstandard(m1_1), main="bmi vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cAs, rstandard(m1_1), main="cAs vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cAm, rstandard(m1_1), main="cAm vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(sts, rstandard(m1_1), main="sts vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(gdp, rstandard(m1_1), main="gdp vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(logufdth, rstandard(m1_1), main="logufdth vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(plio, rstandard(m1_1), main="plio vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(th119, rstandard(m1_1), main="th119 vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cOc, rstandard(m1_1), main="cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(m1_1))
qqline(rstandard(m1_1), col=2)
####### Residual Analysis of m2_1 #######
attach(mtcars)
par(mfrow=c(4,4))
#     Plot residuals vs Predicted values:
plot( fitted(m2_1), rstandard(m2_1), main="Predicted vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Plot residuals vs each x-variable:
plot(sch, rstandard(m2_1), main="sch vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(atmy, rstandard(m2_1), main="atmy vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(hiv, rstandard(m2_1), main="hiv vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(dpria, rstandard(m2_1), main="dpria vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(bmi, rstandard(m2_1), main="bmi vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cAs, rstandard(m2_1), main="cAs vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
abline(a=0, b=0, col='red') # add zero line
plot(cAm, rstandard(m2_1), main="cAm vs residuals plot")
plot(sts, rstandard(m2_1), main="sts vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(gdp, rstandard(m2_1), main="gdp vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(logufdth, rstandard(m2_1), main="logufdth vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(plio, rstandard(m2_1), main="plio vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cOc, rstandard(m2_1), main="cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(m2_1))
qqline(rstandard(m2_1), col=2)
####### Residual Analysis of m3_1 #######
attach(mtcars)
par(mfrow=c(4,4))
#     Plot residuals vs Predicted values:
plot( fitted(m3_1), rstandard(m3_1), main="Predicted vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Plot residuals vs each x-variable:
plot(achl, rstandard(m3_1), main="achl vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(sch, rstandard(m3_1), main="sch vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(atmy, rstandard(m3_1), main="atmy vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(hiv, rstandard(m3_1), main="hiv vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
abline(a=0, b=0, col='red') # add zero line
plot(dpria, rstandard(m3_1), main="dpria vs residuals plot")
plot(bmi, rstandard(m3_1), main="bmi vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cAs, rstandard(m3_1), main="cAs vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cAm, rstandard(m3_1), main="cAm vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(gdp, rstandard(m3_1), main="gdp vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(logufdth, rstandard(m3_1), main="logufdth vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(plio, rstandard(m3_1), main="plio vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(th119, rstandard(m3_1), main="th119 vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(cOc, rstandard(m3_1), main="cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
inter1 = hiv*cAm
inter2 = cAm*gdp
inter3 = cAs*gdp
inter4 = gdp*cOc
inter5 = th119*cOc
plot(inter1, rstandard(m3_1), main="hiv:cAm vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(inter2, rstandard(m3_1), main="cAm:gdp vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(inter3, rstandard(m3_1), main="cAs:gdp vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(inter4, rstandard(m3_1), main="gdp:cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(inter5, rstandard(m3_1), main="th119:cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(m3_1))
qqline(rstandard(m3_1), col=2)
####### Residual Analysis of m3_1 #######
attach(mtcars)
par(mfrow=c(4,4))
plot(inter1, rstandard(m3_1), main="hiv:cAm vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
abline(a=0, b=0, col='red') # add zero line
plot(inter2, rstandard(m3_1), main="cAm:gdp vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(inter3, rstandard(m3_1), main="cAs:gdp vs residuals plot")
plot(inter4, rstandard(m3_1), main="gdp:cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
plot(inter5, rstandard(m3_1), main="th119:cOc vs residuals plot")
abline(a=0, b=0, col='red') # add zero line
#     Draw normal probability plot of residuals:
qqnorm(rstandard(m3_1))
qqline(rstandard(m3_1), col=2)
# Step 5: Model Evaluations by N-folds Cross validations
library(boot)
m1_1 = glm(lfey ~ sch + atmy + hiv + dpria + bmi + cAs + cAm +
sts + gdp + log(newdata$under.five.deaths) + plio + th119 + cOc, data = newdata)
m2_1 = glm(lfey ~ sch + atmy + hiv + dpria + bmi + cAs + cAm +
sts + gdp + log(newdata$under.five.deaths) + plio + cOc, data = newdata)
m3_1 = glm(lfey ~ achl + sch + atmy + hiv + dpria + bmi +
cAs + cAm + gdp + log(newdata$under.five.deaths) + plio + th119 + cOc + hiv:cAm +
cAm:gdp + cAs:gdp + gdp:cOc + th119:cOc, data = newdata)
mse1 = cv.glm(newdata, m1_1, K=10)$delta
mse2 = cv.glm(newdata, m2_1, K=10)$delta
mse3 = cv.glm(newdata, m3_1, K=10)$delta
errs = cbind(mse1, mse2, mse3)
errs
mse1 = cv.glm(newdata, m1_1, K=10)$delta
mse2 = cv.glm(newdata, m2_1, K=10)$delta
errs = cbind(mse1, mse2, mse3)
errs
mse1 = cv.glm(newdata, m1_1, K=10)$delta
mse2 = cv.glm(newdata, m2_1, K=10)$delta
errs = cbind(mse1, mse2, mse3)
errs
mse1 = cv.glm(newdata, m1_1, K=10)$delta
mse2 = cv.glm(newdata, m2_1, K=10)$delta
errs = cbind(mse1, mse2, mse3)
errs
mse1 = cv.glm(newdata, m1_1, K=10)$delta
mse2 = cv.glm(newdata, m2_1, K=10)$delta
errs = cbind(mse1, mse2, mse3)
errs
# Removing Outliers
# influential row numbers
#install.packages('tidyverse')
#install.packages('gridExtra')
library(tidyverse)
library(gridExtra)
cooksd <- cooks.distance(m1_1)
influential <- as.numeric(names(cooksd)[(cooksd > (4/2888))])
influential
# Option) Alternatively, we can try to remove the top x outliers to have a look
# influential <- as.numeric(names(sort(cooksd, decreasing = TRUE)[1:top_x_outlier]))
newdata2 <- newdata[-influential, ]
cAm = newdata2$CountryAmericas
cAs = newdata2$CountryAsia
cOc= newdata2$CountryOceania
sts = newdata2$Status
lfey = newdata2$Life.expectancy
atmy = newdata2$Adult.Mortality
bmi = newdata2$BMI
ufdth = newdata2$under.five.deaths
plio = newdata2$Polio
dpria = newdata2$Diphtheria
hiv = newdata2$HIV.AIDS
gdp = newdata2$GDP
th119 = newdata2$thinness..1.19.years
sch = newdata2$Schooling
m1_1_new = glm(lfey ~ sch + atmy + hiv + dpria + bmi + cAs + cAm +
sts + gdp + log(newdata2$under.five.deaths) + plio + th119 + cOc, data = newdata2) #에러나서 재설정
mse1_new = cv.glm(newdata2, m1_1_new, K=10)$delta
errs2 = cbind(mse1, mse1_new)
errs2
m1_1_new
summary(m1_1_new)
m1_1_new = glm(lfey ~ sch + atmy + hiv + dpria + bmi + cAs + cAm +
sts + gdp + log(newdata2$under.five.deaths) + plio + th119 + cOc, data = newdata2) #에러나서 재설정
mse1_new = cv.glm(newdata2, m1_1_new, K=10)$delta
errs2 = cbind(mse1, mse1_new)
errs2
m1_1_new
summary(m1_1_new)
